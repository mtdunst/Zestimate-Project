p.mat = cor_pmat(numericVars),
colors = c("deepskyblue", "grey100", "firebrick1"),
type="lower",
insig = "blank") +
labs(title = "Correlation Matrix of Numeric Variables", tl.cex = 0.5, tl.col = "black", tl.srt = 45) +
plotTheme()
numericVars <- select_if(st_drop_geometry(CLT_internal), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("deepskyblue", "grey100", "firebrick1"),
type="lower",
insig = "blank") +
labs(title = "Correlation Matrix of Numeric Variables", tl.cex = 0.5, tl.col = "black", tl.offset = 0.5) +
plotTheme()
numericVars <- select_if(st_drop_geometry(CLT_internal), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("deepskyblue", "grey100", "firebrick1"),
type="lower",
insig = "blank") +
labs(title = "Correlation Matrix of Numeric Variables", tl.cex = 0.5, tl.col = "black", method="ellipse", order = 'FPC',mar=c(0,0,2,0)) +
plotTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey40") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
labs(title="Home Price", subtitle="Charlotte Metro Area") +
labs(color = "Observed Sales Price (quintiles)") +
mapTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey70") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
geom_sf(data = CLT_parks, color="darkgreen") +
labs(title="Park Locations vs Home Price", subtitle="Charlotte Metro Area") +
mapTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey30") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
geom_sf(data = CLT_grocery, color="deepskyblue") +
labs(title="Grocery Store Locations vs Home Price", subtitle="Charlotte Metro Area") +
mapTheme()
#Creating training data
inTrain <- createDataPartition(
y = paste(CLT_internal$NUM_FLOORS.cat, CLT_internal$NUM_BEDS.cat),
p = .60, list = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
rm(list = ls())
library(tidycensus)
library(viridis)
library(tidyverse)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
options(scipen=999) #scientific notation off
# Functions and data directory
census_api_key("8c8e36c4b5046c4d7f8a5d9f0f7a7d0ddde86e8b")
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
#Import sales data, remove columns we won't need, add useful columns, set CRS for North Carolina
CLT_internal <-
st_read("https://github.com/mafichman/MUSA_508_Lab/raw/main/Midterm/data/2022/studentData.geojson") %>%
st_transform('ESRI:103500')
CLT_internal <- CLT_internal[c(5,9,20,21,26,28,30:46,57:60,67,68,70,71,72)] %>%
mutate(
age = 2022 - yearbuilt,
sqft = (totalac * 43560),
pricesqft = ((totalac * 43560)/price),
totbaths = (halfbaths*0.5)+(fullbaths))
CLT_internal$quality <- recode(CLT_internal$bldggrade, MINIMUM = 1 , FAIR = 2, AVERAGE = 3, GOOD = 4, VERYGOOD = 5, EXCELLENT = 6, CUSTOM = 7)
# Adding school data
CLT_schools <-
st_read("https://github.com/mtdunst/Zestimate-Project/raw/main/Schools.geojson") %>%
st_transform(st_crs(CLT_internal))
# Adding grocery store data
CLT_grocery <-
st_read("Grocery_pts.geojson") %>%
st_transform(st_crs(CLT_internal))
# Adding parks data
CLT_parks <-
st_read("https://github.com/mtdunst/Zestimate-Project/raw/main/Parks.geojson") %>%
st_transform(st_crs(CLT_internal))
# Adding demographic data
CLT_demo <-
get_acs(geography = "tract",
variables = c("B19013_001E", "B15003_022E","B15003_001E"),
year=2020, state=37, county=119,
geometry=TRUE, output="wide") %>%
st_transform(st_crs(CLT_internal)) %>%
dplyr::select( -NAME, -B19013_001M, -B15003_022M, -B15003_001M)
CLT_demo <-
CLT_demo %>%
rename(HH_inc = B19013_001E,
College = B15003_022E,
College_age_pop = B15003_001E) %>%
mutate(college_perc = College/College_age_pop) %>%
dplyr::select( -College, -College_age_pop)
# Adding neighborhood data
CLT_neighborhoods <-
st_read("https://github.com/mtdunst/Zestimate-Project/raw/main/School_districts.geojson") %>%
st_transform(st_crs(CLT_internal))
# Most near school, grocery store, and park
CLT_internal <-
CLT_internal %>%
mutate(
school_nn1 = nn_function(st_coordinates(st_centroid(CLT_internal)), st_coordinates(st_centroid(CLT_schools)),k = 1),
grocery_nn1 = nn_function(st_coordinates(st_centroid(CLT_internal)), st_coordinates(st_centroid(CLT_grocery)), k = 1),
park_nn1 = nn_function(st_coordinates(st_centroid(CLT_internal)), st_coordinates(st_centroid(CLT_parks)), k = 1))
# Spatial join
CLT_internal <-
st_join(CLT_internal,CLT_demo)
CLT_internal <-
st_join(CLT_internal, CLT_neighborhoods)
#Internal variables
ss_internal <- CLT_internal
ss_internal <- st_drop_geometry(ss_internal)
ss_internal <- ss_internal %>%
dplyr::select("sqft","pricesqft", "totbaths", "yearbuilt")
stargazer(as.data.frame(ss_internal), type="text", digits=1, title = "Descriptive Statistics for Charlotte Metro Area Homes Internal Variables")
#Amenities
ss_amenities <- CLT_internal
ss_amenities <- st_drop_geometry(ss_amenities)
ss_amenities <- ss_amenities %>%
dplyr::select("school_nn1", "grocery_nn1", "park_nn1")
stargazer(as.data.frame(ss_amenities), type="text", digits=1, title = "Descriptive Statistics for Charlotte Metro Area Homes Amentity Variables")
# Spatial Structure
ss_spatial <- CLT_internal
ss_spatial <- st_drop_geometry(ss_spatial)
ss_spatial <- ss_spatial %>%
dplyr::select("HH_inc", "college_perc", "FID")
stargazer(as.data.frame(ss_spatial), type="text", digits=1, title = "Descriptive Statistics for Charlotte Metro Area Homes Internal Variables")
numericVars <- select_if(st_drop_geometry(CLT_internal), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("deepskyblue", "grey100", "firebrick1"),
type="lower",
insig = "blank") +
labs(title = "Correlation Matrix of Numeric Variables", tl.cex = 0.5, tl.col = "black") +
plotTheme()
st_drop_geometry(CLT_internal) %>%
dplyr::select(price, quality, heatedarea, HH_inc, yearbuilt) %>%
filter(price < 10000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) + geom_smooth(method = "lm", se=F, colour = "hotpink") +
facet_wrap(~Variable, ncol = 3, scales = "free") +
labs(title = "Price as a function of Internal and Spatial Variables") +
plotTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey40") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
labs(title="Home Price", subtitle="Charlotte Metro Area") +
labs(color = "Observed Sales Price (quintiles)") +
mapTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey70") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
geom_sf(data = CLT_parks, color="darkgreen") +
labs(title="Park Locations vs Home Price", subtitle="Charlotte Metro Area") +
mapTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey30") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
geom_sf(data = CLT_grocery, color="deepskyblue") +
labs(title="Grocery Store Locations vs Home Price", subtitle="Charlotte Metro Area") +
mapTheme()
ggplot() +
geom_sf(data = CLT_schools, aes(fill=factor(Quality), color=factor(Quality))) +
scale_fill_brewer(palette="RdYlGn") +
scale_color_brewer(palette="RdYlGn") +
labs(title="School Quality", subtitle="Niche.com ratings; Charlotte Metro Area") +
mapTheme()
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
rm(list = ls())
library(tidycensus)
library(viridis)
library(tidyverse)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
options(scipen=999) #scientific notation off
# Functions and data directory
census_api_key("8c8e36c4b5046c4d7f8a5d9f0f7a7d0ddde86e8b")
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
#Creating training data
inTrain <- createDataPartition(
y = paste(CLT_internal$NUM_FLOORS.cat, CLT_internal$NUM_BEDS.cat),
p = .60, list = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
rm(list = ls())
library(tidycensus)
library(viridis)
library(tidyverse)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
options(scipen=999) #scientific notation off
# Functions and data directory
census_api_key("8c8e36c4b5046c4d7f8a5d9f0f7a7d0ddde86e8b")
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
#Import sales data, remove columns we won't need, add useful columns, set CRS for North Carolina
CLT_internal <-
st_read("https://github.com/mafichman/MUSA_508_Lab/raw/main/Midterm/data/2022/studentData.geojson") %>%
st_transform('ESRI:103500')
CLT_internal <- CLT_internal[c(5,9,20,21,26,28,30:46,57:60,67,68,70,71,72)] %>%
mutate(
age = 2022 - yearbuilt,
sqft = (totalac * 43560),
pricesqft = ((totalac * 43560)/price),
totbaths = (halfbaths*0.5)+(fullbaths))
CLT_internal$quality <- recode(CLT_internal$bldggrade, MINIMUM = 1 , FAIR = 2, AVERAGE = 3, GOOD = 4, VERYGOOD = 5, EXCELLENT = 6, CUSTOM = 7)
# Adding school data
CLT_schools <-
st_read("https://github.com/mtdunst/Zestimate-Project/raw/main/Schools.geojson") %>%
st_transform(st_crs(CLT_internal))
# Adding grocery store data
CLT_grocery <-
st_read("Grocery_pts.geojson") %>%
st_transform(st_crs(CLT_internal))
# Adding parks data
CLT_parks <-
st_read("https://github.com/mtdunst/Zestimate-Project/raw/main/Parks.geojson") %>%
st_transform(st_crs(CLT_internal))
# Adding demographic data
CLT_demo <-
get_acs(geography = "tract",
variables = c("B19013_001E", "B15003_022E","B15003_001E"),
year=2020, state=37, county=119,
geometry=TRUE, output="wide") %>%
st_transform(st_crs(CLT_internal)) %>%
dplyr::select( -NAME, -B19013_001M, -B15003_022M, -B15003_001M)
CLT_demo <-
CLT_demo %>%
rename(HH_inc = B19013_001E,
College = B15003_022E,
College_age_pop = B15003_001E) %>%
mutate(college_perc = College/College_age_pop) %>%
dplyr::select( -College, -College_age_pop)
# Adding neighborhood data
CLT_neighborhoods <-
st_read("https://github.com/mtdunst/Zestimate-Project/raw/main/School_districts.geojson") %>%
st_transform(st_crs(CLT_internal))
# Most near school, grocery store, and park
CLT_internal <-
CLT_internal %>%
mutate(
school_nn1 = nn_function(st_coordinates(st_centroid(CLT_internal)), st_coordinates(st_centroid(CLT_schools)),k = 1),
grocery_nn1 = nn_function(st_coordinates(st_centroid(CLT_internal)), st_coordinates(st_centroid(CLT_grocery)), k = 1),
park_nn1 = nn_function(st_coordinates(st_centroid(CLT_internal)), st_coordinates(st_centroid(CLT_parks)), k = 1))
# Spatial join
CLT_internal <-
st_join(CLT_internal,CLT_demo)
CLT_internal <-
st_join(CLT_internal, CLT_neighborhoods)
#Internal variables
ss_internal <- CLT_internal
ss_internal <- st_drop_geometry(ss_internal)
ss_internal <- ss_internal %>%
dplyr::select("sqft","pricesqft", "totbaths", "yearbuilt")
stargazer(as.data.frame(ss_internal), type="text", digits=1, title = "Descriptive Statistics for Charlotte Metro Area Homes Internal Variables")
#Amenities
ss_amenities <- CLT_internal
ss_amenities <- st_drop_geometry(ss_amenities)
ss_amenities <- ss_amenities %>%
dplyr::select("school_nn1", "grocery_nn1", "park_nn1")
stargazer(as.data.frame(ss_amenities), type="text", digits=1, title = "Descriptive Statistics for Charlotte Metro Area Homes Amentity Variables")
# Spatial Structure
ss_spatial <- CLT_internal
ss_spatial <- st_drop_geometry(ss_spatial)
ss_spatial <- ss_spatial %>%
dplyr::select("HH_inc", "college_perc", "FID")
stargazer(as.data.frame(ss_spatial), type="text", digits=1, title = "Descriptive Statistics for Charlotte Metro Area Homes Internal Variables")
numericVars <- select_if(st_drop_geometry(CLT_internal), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("deepskyblue", "grey100", "firebrick1"),
type="lower",
insig = "blank") +
labs(title = "Correlation Matrix of Numeric Variables", tl.cex = 0.5, tl.col = "black") +
plotTheme()
st_drop_geometry(CLT_internal) %>%
dplyr::select(price, quality, heatedarea, HH_inc, yearbuilt) %>%
filter(price < 10000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) + geom_smooth(method = "lm", se=F, colour = "hotpink") +
facet_wrap(~Variable, ncol = 3, scales = "free") +
labs(title = "Price as a function of Internal and Spatial Variables") +
plotTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey40") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
labs(title="Home Price", subtitle="Charlotte Metro Area") +
labs(color = "Observed Sales Price (quintiles)") +
mapTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey70") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
geom_sf(data = CLT_parks, color="darkgreen") +
labs(title="Park Locations vs Home Price", subtitle="Charlotte Metro Area") +
mapTheme()
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey30") +
geom_sf(data = CLT_internal, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(CLT_internal,"price"),
name="Quintile\nBreaks") +
geom_sf(data = CLT_grocery, color="deepskyblue") +
labs(title="Grocery Store Locations vs Home Price", subtitle="Charlotte Metro Area") +
mapTheme()
ggplot() +
geom_sf(data = CLT_schools, aes(fill=factor(Quality), color=factor(Quality))) +
scale_fill_brewer(palette="RdYlGn") +
scale_color_brewer(palette="RdYlGn") +
labs(title="School Quality", subtitle="Niche.com ratings; Charlotte Metro Area") +
mapTheme()
#Re-engineering data as categorical: number of floors
CLT_internal<-
CLT_internal%>%
mutate(NUM_FLOORS.cat = ifelse(storyheigh == "1 STORY" | storyheigh == "1.5 STORY" | storyheigh == "SPLIT LEVEL" | storyheigh == "2.0 STORY", "Up to 2 Floors",
ifelse(storyheigh == "2.5 STORY" | storyheigh == "3.0 STORY", "Up to 3 Floors", "4+ Floors")))
#Re-engineer bedroom as categorical
CLT_internal <-
CLT_internal %>%
mutate(NUM_BEDS.cat = ifelse(bedrooms <= 2, "Up to 2 Bedrooms",
ifelse(bedrooms == 3 | bedrooms == 4, "Up to 4 Bedrooms", "5+ Bedrooms")))
#Re-engineer bathroom data as categorical
CLT_internal <-
CLT_internal %>%
mutate(NUM_BATHS.cat = ifelse(totbaths <= 2.5, "Up to 2.5 Bathrooms",
ifelse(totbaths <= 3.5 | totbaths <= 4.5, "Up to 4 Bathrooms", "5+ Bathrooms")))
#Re-engineering data as categorical: number of floors
CLT_internal<-
CLT_internal%>%
mutate(NUM_FLOORS.cat = ifelse(storyheigh == "1 STORY" | storyheigh == "1.5 STORY" | storyheigh == "SPLIT LEVEL" | storyheigh == "2.0 STORY", "Up to 2 Floors",
ifelse(storyheigh == "2.5 STORY" | storyheigh == "3.0 STORY", "Up to 3 Floors", "4+ Floors")))
#Re-engineer bedroom as categorical
CLT_internal <-
CLT_internal %>%
mutate(NUM_BEDS.cat = ifelse(bedrooms <= 2, "Up to 2 Bedrooms",
ifelse(bedrooms == 3 | bedrooms == 4, "Up to 4 Bedrooms", "5+ Bedrooms")))
#Re-engineer bathroom data as categorical
CLT_internal <-
CLT_internal %>%
mutate(NUM_BATHS.cat = ifelse(totbaths <= 2.5, "Up to 2.5 Bathrooms",
ifelse(totbaths <= 3.5 | totbaths <= 4.5, "Up to 4 Bathrooms", "5+ Bathrooms")))
#Creating training data
inTrain <- createDataPartition(
y = paste(CLT_internal$NUM_FLOORS.cat, CLT_internal$NUM_BEDS.cat),
p = .60, list = FALSE)
charlotte.training <- CLT_internal[inTrain,]
charlotte.test <- CLT_internal[-inTrain,]
reg.training <- lm(price ~ ., data = st_drop_geometry(charlotte.training) %>%
dplyr::select(price, heatedarea,
quality, NUM_FLOORS.cat,
NUM_BEDS.cat, NUM_BATHS.cat,
park_nn1, grocery_nn1,
age, HH_inc, college_perc))
summary(reg.training)
#Creating predictions and calculating Mean Absolute Error (MAE) and Mean Absolute Percent Error (MAPE)
charlotte.test <-
charlotte.test %>%
mutate(price.Predict = predict(reg.training, charlotte.test),
price.Error = price.Predict - price,
price.AbsError = abs(price.Predict - price),
price.APE = (abs(price.Predict - price)) / price.Predict)%>%
filter(price < 5000000)
MAE <- mean(charlotte.test$price.AbsError, na.rm = T)
MAPE <- mean(charlotte.test$price.APE, na.rm = T)
reg.MAE.MAPE <-
cbind(MAE, MAPE) %>%
kable(caption = "Regression MAE & MAPE") %>%
kable_styling("hover",full_width = F)
reg.MAE.MAPE
#Cross-validation
fitControl <- trainControl(method = "cv", number = 100)
set.seed(825)
reg.cv <-
train(price ~ ., data = st_drop_geometry(CLT_internal) %>%
dplyr::select(price, heatedarea,
quality, NUM_FLOORS.cat,
NUM_BEDS.cat, NUM_BATHS.cat, grocery_nn1,
age, HH_inc, college_perc,
park_nn1),
method = "lm", trControl = fitControl, na.action = na.pass)
summary(reg.cv)
#Visualizing prediction errors
charlotte.APE <- charlotte.test[c(6,36,43:46,51,54)]
charlotte_APE.sf <-
charlotte.APE %>%
filter(price.APE > 0) %>%
st_as_sf(sf_column_name=geometry) %>%
st_transform('ESRI:103500')
ggplot() +
geom_sf(data = CLT_neighborhoods, fill = "grey40") +
geom_sf(data = charlotte_APE.sf, aes(color = price.APE), size = .25) +
labs(title="Predicted Sales Price\nAbsolute Percent Error") +
binned_scale(aesthetics = "color",
scale_name = "stepsn",
palette = function(x) c("#1a9641", "#a6d96a", "#ffffbf", "#fdae61", "#d7191c"),
breaks = c(0.10, 0.20, 0.5, 0.75),
limits = c(0, 50),
show.limits = TRUE,
guide = "colorsteps"
) +
mapTheme()
#Predicted vs observed sales price
ggplot(
charlotte_APE.sf, aes(price, price.Predict, col = price.APE)) +
binned_scale(aesthetics = "color",
scale_name = "stepsn",
palette = function(x) c("#1a9641", "#a6d96a", "#ffffbf", "#fdae61", "#d7191c"),
breaks = c(0.10, 0.20, 0.5, 0.75),
limits = c(0, 50),
show.limits = TRUE,
guide = "colorsteps"
) +
geom_point(size=1) +
scale_y_continuous(limits = c(0, 4000000)) +
scale_x_continuous(limits = c(0, 4000000)) +
labs(title="Sales Price vs. Predicted", subtitle="Charlotte Metro Area") +
ylab("Predicted Sales Price (in dollars)") +
xlab("Observed Sales Price (in dollars)") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "black", size = 0.5) +
labs(color = "Absolute % Error") +
geom_label(
label="0% error line",
x=3500000,
y=3000000,
label.padding = unit(0.25, "lines"), # Rectangle size around label
label.size = 0.15,
color = "black",
fill="grey80")
